// Core functions
//
// This section describes core functions used for development in the project.
//
// Weight: 3
//
// Style guide: sass.functions
//
// Part: functions

// strip-unit($num)
//
// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
//
// Returns the same number, sans unit.
//
// $num = required - {Number}; Number to strip unit from.
//
// Return: Number
//
// Weight: 1
//
// Style guide: sass.functions.stripUnit
//
// Part: functions

@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// value-to-rem($value, $base)
//
// **Private function**.
//
// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value.
// By default, the base pixel value used to calculate the rem value is taken from the `$globalFontSize` variable.
//
// Returns a number in rems, calculated based on the given value and the base pixel value.
// rem values are passed through as is.
//
// $value = required - {Number}; Pixel value to convert.
// $base = null - {Number}; Base for pixel conversion.
//
// Return: Number
//
// Weight: 2
//
// Style guide: sass.functions.valueToRem
//
// Part: functions

@function value-to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
        @error inspect($value) + ' was passed to rem(), which is not a number.';
        @return $value;
    }

    // Transform em into rem if someone hands over 'em's
    @if unit($value) == 'em' {
        $value: strip-unit($value) * 1rem;
    }

    // Calculate rem if units for $value is not rem or em
    @if unit($value) != 'rem' {
        $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}

// rem($values, $base)
//
// Converts one or more pixel values into matching rem values.
// By default, the base pixel value used to calculate the rem value is taken from the `$globalFontSize` variable.
// If you need to convert a comma-separated list, wrap the list in parentheses.
//
// Return a list of converted values.
//
// $values = required - {Number|List}; One or more values to convert.
// Be sure to separate them with spaces and not commas.
// $base = null - {Number}; The base value to use when calculating the `rem`.
//
// Return: Number|List
//
// Weight: 3
//
// Style guide: sass.functions.remCalc
//
// Part: functions

@function rem($values, $base: null) {
    $remValues: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: $globalFontSize;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: ($base / 100%) * 16px;
    }

    // Using rem as base allows correct scaling
    @if unit($base) == 'rem' {
        $base: strip-unit($base) * 16px;
    }

    @if $count == 1 {
        @return value-to-rem($values, $base);
    }

    @for $item from 1 through $count {
        $remValues: append($remValues, value-to-rem(nth($values, $item), $base));
    }

    @return $remValues;
}

// map-safe-get($map, $key)
//
// Safely return a value from a map.
//
// Returns found value. Can has any SASS data type
//
// $map = required - {Map}; Map to retrieve a value from.
// $key = required - {String}; Name of the map key.
//
// Return: AnyType
//
// Weight: 4
//
// Style guide: sass.functions.mapSafeGet
//
// Part: functions

@function map-safe-get($map, $key) {
    @if (type-of($map) == 'map' or (type-of($map) == 'list' and length($map) == 0)) {
        @if (map-has-key($map, $key)) {
            @return map-get($map, $key);
        } @else {
            @error 'There is no key `#{$key}` in the list of keys `#{map-keys($map)}`';
        }
    } @else {
        @error '`#{$map}` is not a valid map';
    }
}

// map-deep-get($map, $key)
//
// **Private function**.
//
// Safely return a value from a map.
//
// Returns found value.
//
// $map = required - {Map}; Map to retrieve a value from.
// $key = required - {List}; List of the map keys.
//
// Return: Map
//
// Weight: 5
//
// Style guide: sass.functions.mapDeepGet
//
// Part: functions

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-safe-get($map, $key);
    }
    @return $map;
}

// color($colorName, $type, $palette)
//
// Return color from multidimensional color map. You can customize it by `$colorMap` constant.
//
// Returns color value from `$colorMap`.
//
// $colorName = required - {Map|String}; Map value or color map property.
// $type = null - {String}; String of multidimensional key map.
// $palette = $colorMap - {Map}; List of the map keys.
//
// Return: Color
//
// Weight: 6
//
// Style guide: sass.functions.color
//
// Part: functions

@function color($colorName, $type: null, $palette: $colorMap) {
    $color: null;

    @if (type-of($type) == string) {
        $color: map-deep-get($palette, $type, $colorName);

        @if (type-of($color) == color) {
            @return $color;
        } @else {
            @error 'There is no key `#{$color}` in the list of keys `#{map-keys($type)}`';
        }
    } @else {
        $color: map-safe-get($palette, $colorName);

        @if (type-of($color) == color) {
            @return $color;
        } @else {
            @error 'There is no key `#{$colorName}` in the list of keys `#{map-keys($palette)}`';
        }
    }
}
